<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AD&#39;s Logs</title>
  
  
  <link href="https://0xakd.github.io/atom.xml" rel="self"/>
  
  <link href="https://0xakd.github.io/"/>
  <updated>2025-09-07T05:40:50.357Z</updated>
  <id>https://0xakd.github.io/</id>
  
  <author>
    <name>Ajay Kumar Dey</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Arduino for the Clueless (but Curious)</title>
    <link href="https://0xakd.github.io/2025/07/17/Arduino-for-the-Clueless-but-Curious/"/>
    <id>https://0xakd.github.io/2025/07/17/Arduino-for-the-Clueless-but-Curious/</id>
    <published>2025-07-17T13:12:26.000Z</published>
    <updated>2025-09-07T05:40:50.357Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/Arduino-for-the-Clueless-but-Curious/coverpage.jpeg" alt="cover page"></p><blockquote><p>“Ever wished you could build your own robot or control lights with just a few lines of code?”</p></blockquote><p>Arduino lets anyone try electronics, even if you’ve never done it before. The parts are easy to use, and the software is simple.</p><p>You don’t need to be a coding genius to start. If you’ve ever plugged in a USB cable or built a LEGO set, you’re already qualified to start.</p><hr><h2 id="What-is-Arduino"><a href="#What-is-Arduino" class="headerlink" title="What is Arduino???"></a>What is Arduino???</h2><p>Arduino is an italian open-source electronics platform based on easy-to-use hardware and software. Arduino consists of both a physical programmable circuit board (often referred to as a microcontroller) and a piece of software or IDE (Integrated Development Environment) that runs on your computer, used to write and upload code to the physical board. </p><p><img src="/../images/Arduino-for-the-Clueless-but-Curious/labeledboard.jpeg" alt="Arduino Board"> </p><center><i>This is an Arduino Uno Board</i></center><hr><h3 id="What’s-on-the-Arduino-Board"><a href="#What’s-on-the-Arduino-Board" class="headerlink" title="What’s on the Arduino Board??"></a>What’s on the Arduino Board??</h3><ul><li><p><strong>Pins</strong><br>The Arduino board is equipped with a variety of pins that serve different purposes in connecting and controlling electronic components.</p><ol><li><strong>Digital Pins:</strong> There are 14 digital pins (numbered 0–13) on the Arduino board. These pins can read or write digital signals—either HIGH (on) or LOW (off)—to and from connected devices.</li><li><strong>PWM Pins:</strong> Out of the digital pins, 6 are PWM (Pulse Width Modulation) pins, marked with a tilde (~). PWM pins allow you to simulate analog output by varying the signal between 0 and 255, useful for controlling things like LED brightness or motor speed.</li><li><strong>Analog Input Pins:</strong> The board includes 6 analog input pins (A0–A5). These pins can read a range of voltage values, letting you capture sensor data with greater precision (values from 0 to 1023).</li><li><strong>Power Pins:</strong> These pins supply voltage (3.3V or 5V) and ground (GND) connections to power external components and sensors.</li><li><strong>Communication Pins:</strong> The board also features pins for serial communication, such as TX (transmit) and RX (receive), which are used to communicate with your computer or other devices.</li><li><strong>GND Pins:</strong> These are the ‘Ground’ pins. The Arduino board has 3 GND pins, and any of them can be used to complete the circuit by providing a common ground connection.</li></ol></li><li><p><strong>Reset Button</strong><br>  The Arduino reset button is a Physical button on the board, which is when pressed, causes the microcontroller to temporarily connect the reset pin to the ground and restart any code that is loaded on the Arduino.</p></li><li><p><strong>USB Type B Port</strong><br>  The USB Type B port is used to connect the Arduino board to your computer. This connection serves two purposes: it powers the board and allows you to upload code from the Arduino IDE to the microcontroller.</p></li><li><p><strong>Power Jack</strong><br>  The power jack allows you to supply external power to the Arduino board, typically using a 7–12V DC adapter. This is useful when your project requires more power than what the USB connection can provide, or when you want your Arduino to run independently of your computer.</p></li><li><p><strong>ATMEGA328P Microcontroller</strong><br>  The ATMEGA328P microcontroller is the brain of the Arduino board. It stores and executes the code uploaded from the Arduino IDE, manages all inputs and outputs, and handles logic and timing for your projects.</p></li><li><p><strong>ICSP Pins</strong><br>  These are ICSP(In-Circuit Serial Programming) Pins. These pins are mainly used for low-level programming of the microcontrollers, like burning the bootloader or uploading firmware.</p></li></ul><hr><h3 id="Arduino-IDE"><a href="#Arduino-IDE" class="headerlink" title="Arduino IDE"></a>Arduino IDE</h3><p>The Arduino IDE (Integrated Development Environment) is an open-source software written in Java that runs on multiple platforms including Windows, macOS, and Linux. It serves as the primary tool for writing, compiling, and uploading code to Arduino boards.</p><p>Just like other code editors, the Arduino IDE provides a user-friendly interface with features like syntax highlighting, auto-indentation, and error messaging, which make writing code easier even for beginners. One of its biggest advantages is the simplicity — you can write your code (called a “sketch”) and upload it to your Arduino board with just a single click.</p><p>You can download the IDE from the <strong><a href="https://www.arduino.cc/en/software">official Arduino website</a></strong>, and it’s completely free to use.</p><p><img src="/../images/Arduino-for-the-Clueless-but-Curious/arduino_ide.jpeg" alt="Arduino IDE"></p><center><i>Screenshot of Arduino IDE.</i></center><br><h3 id="Components-of-the-Arduino-IDE"><a href="#Components-of-the-Arduino-IDE" class="headerlink" title="Components of the Arduino IDE"></a>Components of the Arduino IDE</h3><p>Let’s now talk about the main components of the IDE interface that you’ll interact with:</p><ul><li><strong>Toolbar</strong>: Includes buttons to verify, upload, create a new sketch, open, save, and more.</li><li><strong>Text Editor</strong>: Where you write your code (sketch).</li><li><strong>Message Area</strong>: Displays compiler errors and notifications.</li><li><strong>Console</strong>: Shows detailed output like errors and upload status.</li><li><strong>Board &amp; Port Selector</strong>: Lets you choose the connected Arduino board and COM port.</li><li><strong>Serial Monitor</strong>: A powerful built-in tool used to send and receive data from your Arduino in real time.</li></ul><h3 id="The-Serial-Monitor"><a href="#The-Serial-Monitor" class="headerlink" title="The Serial Monitor"></a>The Serial Monitor</h3><p>The <strong>Serial Monitor</strong> is an essential debugging tool in the Arduino IDE. It allows you to print messages, read sensor outputs, and interact with the Arduino through serial communication.</p><p>For example, if you write:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line">Serial.<span class="built_in">println</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/Arduino-for-the-Clueless-but-Curious/serial_monitor.jpeg" alt="Arduino Serial Monitor"></p><center><i>Screenshot of Arduino Serial Monitor</i></center><h3 id="Real-World-Applications-Of-Arduino"><a href="#Real-World-Applications-Of-Arduino" class="headerlink" title="Real World Applications Of Arduino"></a>Real World Applications Of Arduino</h3><p>Arduino is used in countless real-world applications, from simple hobby projects to advanced . You’ll find Arduino boards powering home automation systems, weather stations, wearable devices, interactive art installations, robotics, and even scientific instruments. Its versatility and ease of use make it a favorite among students, engineers, artists, and makers worldwide.</p><h2 id="Components-You-Need-to-Get-Started"><a href="#Components-You-Need-to-Get-Started" class="headerlink" title="Components You Need to Get Started"></a>Components You Need to Get Started</h2><ul><li><strong>Arduino Uno Board</strong></li><li><strong>USB Type B Cable</strong></li><li><strong>Bread Board</strong></li><li><strong>LEDs, resistors, jumper wires, potentiometer</strong></li><li><strong>Sensors</strong></li><li><strong>Computer with Arduino IDE installed.</strong></li></ul><p>If you don’t have the physical components right now, you can use the <strong><a href="https://www.tinkercad.com/">Tinkercad</a></strong> website to get started. It provides a graphical simulation environment where you can build circuits, write Arduino code, and test your projects virtually — all from your browser. Tinkercad also includes a built-in Arduino IDE and a Serial Monitor, allowing you to write and debug your code just like on the actual Arduino software.</p><h2 id="How-Arduino-Code-Talks-to-the-Hardware"><a href="#How-Arduino-Code-Talks-to-the-Hardware" class="headerlink" title="How Arduino Code Talks to the Hardware"></a>How Arduino Code Talks to the Hardware</h2><p>Programming Arduino is done using a simplified version of C&#x2F;C++. The code you write is called a “sketch.” Every sketch has two main functions:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Runs once when the board is powered on or reset</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Runs repeatedly after setup()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>setup()</strong>: Used to initialize settings, such as configuring pin modes or starting serial communication.</li><li><strong>loop()</strong>: Contains the main logic and runs continuously.</li></ul><h3 id="Example-Blink-an-LED"><a href="#Example-Blink-an-LED" class="headerlink" title="Example: Blink an LED"></a>Example: Blink an LED</h3><p>This classic example turns an LED on and off every second.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">pinMode</span>(<span class="number">13</span>, OUTPUT); <span class="comment">// Set digital pin 13 as output mode</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">digitalWrite</span>(<span class="number">13</span>, HIGH); <span class="comment">// Turn the LED on</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1000</span>);            <span class="comment">// Wait 1 second</span></span><br><span class="line">    <span class="built_in">digitalWrite</span>(<span class="number">13</span>, LOW);  <span class="comment">// Turn the LED off</span></span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1000</span>);            <span class="comment">// Wait 1 second</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Before uploading your code to the Arduino, let’s first build the circuit.</p><p><img src="/../images/Arduino-for-the-Clueless-but-Curious/ledcircuit.png" alt="LED Blink Circuit"></p><center><i>Circuit for Blinking LED</i></center><p>Once your circuit is ready, connect your Arduino to your computer. In the Arduino IDE, select the correct board type and COM port from the Tools menu. Click the “Upload” button to transfer your sketch to the Arduino. If everything is set up correctly, the built-in LED on pin 13 will start blinking on and off each second.</p><h3 id="Key-Functions"><a href="#Key-Functions" class="headerlink" title="Key Functions"></a>Key Functions</h3><ul><li><code>pinMode(pin_number, mode)</code>: Sets a pin as INPUT or OUTPUT.</li><li><code>digitalWrite(pin_number, value)</code>: Sets a digital pin HIGH or LOW.</li><li><code>digitalRead(pin_number)</code>: Reads the value from a digital pin.</li><li><code>analogRead(pin_number)</code>: Reads an analog value (0–1023).</li><li><code>analogWrite(pin_number, value)</code>: Writes an analog value (PWM, 0–255).</li></ul><p>Experiment with different sensors and actuators by changing the code and wiring. The Arduino IDE provides many built-in examples to help you learn.</p><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Arduino makes electronics and programming accessible to everyone, regardless of background or experience. With just a few components and simple code, you can start building interactive projects and learn valuable skills along the way. Whether you want to automate your home, create art, or explore robotics, Arduino is the perfect platform to turn your curiosity into real-world creations. Dive in, experiment, and let your imagination lead the way!</p><hr><h2 id="Further-Resources"><a href="#Further-Resources" class="headerlink" title="Further Resources"></a>Further Resources</h2><p>To deepen your understanding and expand your skills, consider exploring the following resources:</p><ul><li><strong>Official Arduino Documentation:</strong> Comprehensive guides and reference materials — <a href="https://docs.arduino.cc/">Arduino Docs</a></li><li><strong>Arduino Project Hub:</strong> Browse and contribute to a wide range of community projects — <a href="https://arduino.cc/projecthub">Project Hub</a></li><li><strong>Online Courses:</strong> Platforms like Coursera, Udemy, and edX offer structured Arduino courses for all levels.</li><li><strong>Community Forums:</strong> Engage with other makers, ask questions, and share your progress — <a href="https://forum.arduino.cc/">Arduino Forum</a></li></ul><p>Investing time in these resources will help you build a strong foundation and stay updated with the latest advancements in Arduino and embedded systems.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/Arduino-for-the-Clueless-but-Curious/coverpage.jpeg&quot; alt=&quot;cover page&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Ever wished you could bu</summary>
      
    
    
    
    <category term="hardware" scheme="https://0xakd.github.io/categories/hardware/"/>
    
    
    <category term="arduino" scheme="https://0xakd.github.io/tags/arduino/"/>
    
    <category term="basics" scheme="https://0xakd.github.io/tags/basics/"/>
    
    <category term="DIY" scheme="https://0xakd.github.io/tags/DIY/"/>
    
  </entry>
  
  <entry>
    <title>Linked List in C</title>
    <link href="https://0xakd.github.io/2025/01/09/linked-list-in-c/"/>
    <id>https://0xakd.github.io/2025/01/09/linked-list-in-c/</id>
    <published>2025-01-09T12:26:20.000Z</published>
    <updated>2025-09-07T03:18:42.492Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/linked-list-in-c/image.png" alt="cover image"></p><h3 id="What-is-a-Linked-List"><a href="#What-is-a-Linked-List" class="headerlink" title="What is a Linked List ??"></a>What is a Linked List ??</h3><p>A <strong>linked list</strong> is a dynamic data structure used to store a sequence of elements. Unlike arrays, linked lists do not store elements in contiguous memory locations. Instead, each element, known as a node, consists of two parts: Data and a Pointer to the next Node.</p><h3 id="Components-of-a-Linked-List"><a href="#Components-of-a-Linked-List" class="headerlink" title="Components of a Linked List"></a>Components of a Linked List</h3><p>Linked lists consists of 3 components :-</p><ul><li><p><strong>Node</strong>: A node is the building block of a linked list. it further consists of two parts, which are:-</p><ul><li><p><strong>Data</strong>: A variable containing the value of the node</p></li><li><p><strong>Next</strong>: A pointer pointing to the next node.</p></li></ul></li><li><p><strong>Head</strong>: The head is a pointer variable which points to the first node of the list.</p></li><li><p><strong>Tail</strong>: The last node of the list, which points to null.</p></li></ul><h2 id="Structure-of-the-linked-list"><a href="#Structure-of-the-linked-list" class="headerlink" title="Structure of the linked list"></a>Structure of the linked list</h2><p><img src="/../images/linked-list-in-c/image2.png" alt="structure diagram"></p><h3 id="Making-the-structure-of-the-Linked-list"><a href="#Making-the-structure-of-the-Linked-list" class="headerlink" title="Making the structure of the Linked list."></a>Making the structure of the Linked list.</h3><p>Code for making the structure of linked list.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Structure of Linked list.</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="type">int</span> value;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br></pre></td></tr></table></figure><p>In the above code, we have made a structure which consist of 2 variables: value and next. The value is of type int, so it will store integer values, and the next variable is a pointer variable which is a pointer which will point to next node (if present) or NULL.</p><h2 id="Basic-operations-with-Linked-Lists"><a href="#Basic-operations-with-Linked-Lists" class="headerlink" title="Basic operations with Linked Lists"></a>Basic operations with Linked Lists</h2><h3 id="Insertion"><a href="#Insertion" class="headerlink" title="Insertion"></a>Insertion</h3><p>In this operation we will learn how to add more nodes to the Linked list. There are several ways by which we can do that:-</p><ul><li><strong>Insertion at head -</strong></li></ul><p>Insertion at head means to make a new node and add it at the beginning of the linked list i.e. make the new node the first node of the list. And make the head point to the new node and the new node to the node which was previously pointed by the head.</p><p>Refer to the picture below for better understanding.<br><img src="/../images/linked-list-in-c/image3.png" alt="insertion at head"></p><p>As you can see in the above picture we’ve inserted a new node and made the head now pointing the new node. Lets see how we can write it in C language:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//Function for inserting new node at the starting of the list.</span></span><br><span class="line">Node *<span class="title function_">insert_at_head</span><span class="params">(Node *head,<span class="type">int</span> new_value)</span>&#123;</span><br><span class="line">Node *newnode = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(Node));</span><br><span class="line">newnode -&gt; value = new_value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span> newnode;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">newnode -&gt; next = head;</span><br><span class="line"><span class="keyword">return</span> newnode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">Node *list1_head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">list1_head = insert_at_head(list1_head, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">print_node(list1_head); <span class="comment">//we will learn to print nodes later.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Insertion at tail -</strong><br>In this, we make a new node and insert it after the last node of the linked list. And Modify the previous tail node to the new node.<br><img src="/../images/linked-list-in-c/image4.png" alt="insertion at tail"></li></ul><p>We can write it in codes as -</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Function for inserting new tail node.</span></span><br><span class="line">Node *<span class="title function_">insert_at_tail</span><span class="params">(Node *head,<span class="type">int</span> new_value)</span>&#123;</span><br><span class="line">Node *new_node = <span class="built_in">calloc</span>(<span class="number">1</span>,<span class="keyword">sizeof</span>(Node));</span><br><span class="line">new_node -&gt; value = new_value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span> new_node;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">Node *current = head;</span><br><span class="line"><span class="keyword">while</span> (current -&gt; next != <span class="literal">NULL</span>) current = current -&gt; next; </span><br><span class="line">current -&gt; next = new_node;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">Node *head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">head = insert_at_tail(head, <span class="number">2</span>);</span><br><span class="line">head = insert_at_tail(head, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">print_node(head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Insertion after any node.</strong><br>In this, we take a new node value and a node after which we want to place the new node. And place the new node after that node and make that node point the new node and the new node point the next node.</li></ul><p>Like this,<br><img src="/../images/linked-list-in-c/image5.png" alt="insertion after node"></p><p>We can write this in C language as…</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Function for inserting new nodes between 2 nodes.</span></span><br><span class="line">Node *<span class="title function_">insert_after</span><span class="params">(Node *head, <span class="type">int</span> new_value, <span class="type">int</span> after_value)</span>&#123;</span><br><span class="line">Node *new_node = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span>(Node));</span><br><span class="line">new_node -&gt; value = new_value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span> new_node;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">Node *current = head;</span><br><span class="line"><span class="keyword">while</span> (current -&gt; next != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (current -&gt; value == after_value)&#123;</span><br><span class="line">new_node -&gt; next = current -&gt; next;</span><br><span class="line">current -&gt; next = new_node;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;<span class="keyword">else</span> current = current -&gt; next;</span><br><span class="line">&#125;</span><br><span class="line">new_node -&gt; next = current -&gt; next;</span><br><span class="line">current -&gt; next = new_node;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">Node *head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">head = insert_at_tail(head, <span class="number">2</span>);  <span class="comment">//function not included in this code.</span></span><br><span class="line">head = insert_at_tail(head, <span class="number">4</span>);  <span class="comment">//function not included in this code.</span></span><br><span class="line">    head = insert_at_tail(head, <span class="number">6</span>);  <span class="comment">//function not included in this code.</span></span><br><span class="line">    head = insert_at_tail(head, <span class="number">8</span>);  <span class="comment">//function not included in this code.</span></span><br><span class="line">    head = insert_at_tail(head, <span class="number">10</span>); <span class="comment">//function not included in this code.</span></span><br><span class="line">    head = insert_at_tail(head, <span class="number">12</span>); <span class="comment">//function not included in this code.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;List before insertion:&quot;</span>);</span><br><span class="line">print_node(head);                <span class="comment">//function not included in this code.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;List after insertion:&quot;</span>);</span><br><span class="line">insert_after(head, <span class="number">20</span>, <span class="number">6</span>);</span><br><span class="line">print_node(head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output</span></span><br><span class="line"><span class="comment">List before insertion:Node 0 = 2</span></span><br><span class="line"><span class="comment">Node 1 = 4</span></span><br><span class="line"><span class="comment">Node 2 = 6</span></span><br><span class="line"><span class="comment">Node 3 = 8</span></span><br><span class="line"><span class="comment">Node 4 = 10</span></span><br><span class="line"><span class="comment">Node 5 = 12</span></span><br><span class="line"><span class="comment">List after insertion:Node 0 = 2</span></span><br><span class="line"><span class="comment">Node 1 = 4</span></span><br><span class="line"><span class="comment">Node 2 = 6</span></span><br><span class="line"><span class="comment">Node 3 = 20</span></span><br><span class="line"><span class="comment">Node 4 = 8</span></span><br><span class="line"><span class="comment">Node 5 = 10</span></span><br><span class="line"><span class="comment">Node 6 = 12</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Deletion"><a href="#Deletion" class="headerlink" title="Deletion"></a>Deletion</h3><p>Deletion here means to delete a remove a node from a linked list and free its memory with the use of the free() function. Some ways of deletion are as follows:</p><ul><li><strong>Deletion at head</strong><br>It means to delete the first node of the linked list, and modify the head to point the next node.<br><img src="/../images/linked-list-in-c/image6.png" alt="deletion at head"></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Function for deleting the head of linked list.</span></span><br><span class="line">Node *<span class="title function_">delete_head</span><span class="params">(Node *head)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">Node *to_return = head -&gt; next;</span><br><span class="line"><span class="built_in">free</span>(head);</span><br><span class="line"><span class="keyword">return</span> to_return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">Node *list1_head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">list1_head = insert_at_head(list1_head, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">print_node(list1_head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Deletion at tail.</strong></li></ul><p>Deleting the last node of the linked list. We have to just free the last node and we’re done.<br><img src="/../images/linked-list-in-c/image7.png" alt="deletion at tail"></p><p>Here is the code for doing that,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function for deleting the tail node of linked list.</span></span><br><span class="line">Node *<span class="title function_">delete_tail</span><span class="params">(Node *head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// Empty list.</span></span><br><span class="line">    <span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) &#123;      <span class="comment">// Only one node in the list.</span></span><br><span class="line">        <span class="built_in">free</span>(head);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *current = head;</span><br><span class="line">    <span class="keyword">while</span> (current-&gt;next-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(current-&gt;next);</span><br><span class="line">    current-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Node *list1_head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    list1_head = insert_at_head(list1_head, <span class="number">3</span>);</span><br><span class="line">    list1_head = insert_at_head(list1_head, <span class="number">2</span>);</span><br><span class="line">    list1_head = insert_at_head(list1_head, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Linked list before deleting tail:\n&quot;</span>);</span><br><span class="line">    print_node(list1_head);</span><br><span class="line"></span><br><span class="line">    list1_head = delete_tail(list1_head);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nLinked list after deleting tail:\n&quot;</span>);</span><br><span class="line">    print_node(list1_head);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Deleting first matching element</strong><br>In this we’ll take an input from the user and delete the matching node from the linked list. if no node matches the input then it will delete nothing.<br><img src="/../images/linked-list-in-c/image8.png" alt="deleting first matching element"></li></ul><p>lets write a code for that,</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Function for First Matching Node.</span></span><br><span class="line">Node *<span class="title function_">delete_first_match</span><span class="params">(Node *head, <span class="type">int</span> delete_value, <span class="type">bool</span> *was_deleted)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (head==<span class="literal">NULL</span>)&#123;</span><br><span class="line">*was_deleted = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (head-&gt;value == delete_value)&#123;</span><br><span class="line">Node *temp = head-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(head);</span><br><span class="line">*was_deleted = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node *current = head-&gt;next;</span><br><span class="line">Node *prev = head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (current -&gt; value == delete_value)&#123;</span><br><span class="line">prev-&gt;next = current -&gt; next;</span><br><span class="line"><span class="built_in">free</span>(current);</span><br><span class="line">*was_deleted = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prev = current;</span><br><span class="line">current = current -&gt; next;</span><br><span class="line">&#125;</span><br><span class="line">*was_deleted = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">Node *head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">head = insert_at_head(head, <span class="number">7</span>);</span><br><span class="line">        head = insert_at_head(head, <span class="number">5</span>);</span><br><span class="line">        head = insert_at_head(head, <span class="number">3</span>);</span><br><span class="line">        head = insert_at_head(head, <span class="number">6</span>);</span><br><span class="line">        head = insert_at_head(head, <span class="number">1</span>);</span><br><span class="line">        head = insert_at_head(head, <span class="number">3</span>);</span><br><span class="line">        head = insert_at_head(head, <span class="number">2</span>);</span><br><span class="line">        head = insert_at_head(head, <span class="number">8</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> del_num;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Enter a number to delete:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;del_num);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;List before Deletion\n&quot;</span>);</span><br><span class="line">print_Node(head);</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> deleted;</span><br><span class="line">head = delete_first_match(head,del_num,&amp;deleted);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (deleted)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;List after Deletion:\n&quot;</span>);</span><br><span class="line">print_Node(head);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;value not found:\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output</span></span><br><span class="line"><span class="comment">Enter a number to delete:3</span></span><br><span class="line"><span class="comment">List before Deletion</span></span><br><span class="line"><span class="comment">Node 1 = 8</span></span><br><span class="line"><span class="comment">Node 2 = 2</span></span><br><span class="line"><span class="comment">Node 3 = 3</span></span><br><span class="line"><span class="comment">Node 4 = 1</span></span><br><span class="line"><span class="comment">Node 5 = 6</span></span><br><span class="line"><span class="comment">Node 6 = 3</span></span><br><span class="line"><span class="comment">Node 7 = 5</span></span><br><span class="line"><span class="comment">Node 8 = 7</span></span><br><span class="line"><span class="comment">List after Deletion:</span></span><br><span class="line"><span class="comment">Node 1 = 8</span></span><br><span class="line"><span class="comment">Node 2 = 2</span></span><br><span class="line"><span class="comment">Node 3 = 1</span></span><br><span class="line"><span class="comment">Node 4 = 6</span></span><br><span class="line"><span class="comment">Node 5 = 3</span></span><br><span class="line"><span class="comment">Node 6 = 5</span></span><br><span class="line"><span class="comment">Node 7 = 7</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Traversing"><a href="#Traversing" class="headerlink" title="Traversing"></a>Traversing</h3><p><strong>Traversing</strong> a linked list means accessing and processing each node of the linked list exactly once, starting from the head node and following the links (pointers) to reach each subsequent node until the end.</p><ul><li><strong>Printing nodes</strong><br>A very simple use of traversing a linked list is Printing all the nodes. Lets see how we can traverse our linked list and print each node’s data.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Function for printing a Node.</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_Node</span> <span class="params">(Node *head)</span>&#123;</span><br><span class="line">Node *current;</span><br><span class="line">current = head;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Node %d = %d\n&quot;</span>, i,current-&gt;value);</span><br><span class="line">i++;</span><br><span class="line">current = current -&gt; next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">Node a,b,c;</span><br><span class="line"></span><br><span class="line">a.value=<span class="number">5</span>;</span><br><span class="line">a.next=&amp;b;</span><br><span class="line"></span><br><span class="line">b.value=<span class="number">10</span>;</span><br><span class="line">b.next=&amp;c;</span><br><span class="line"></span><br><span class="line">c.value=<span class="number">15</span>;</span><br><span class="line">c.next=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">print_Node(&amp;a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Output</span></span><br><span class="line"><span class="comment">Node 1 = 5</span></span><br><span class="line"><span class="comment">Node 2 = 10</span></span><br><span class="line"><span class="comment">Node 3 = 15 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Why-use-Linked-Lists-rather-than-Arrays"><a href="#Why-use-Linked-Lists-rather-than-Arrays" class="headerlink" title="Why use Linked Lists rather than Arrays ??"></a>Why use Linked Lists rather than Arrays ??</h2><p>Linked lists are often preferred over arrays in dynamic memory allocation like arrays, which have a fixed size, linked lists are dynamic structures that grow or shrink as needed without requiring contiguous memory blocks.</p><h3 id="Advantages-of-Linked-Lists-over-Arrays"><a href="#Advantages-of-Linked-Lists-over-Arrays" class="headerlink" title="Advantages of Linked Lists over Arrays :"></a>Advantages of Linked Lists over Arrays :</h3><p><strong>Dynamic Size:</strong><br>In Linked lists we can dynamically adjust their size during runtime of the program, instead of declaring a fixed size at the beginning.</p><p><strong>Efficient Insertions&#x2F;Deletions:</strong><br>Inserting or deleting elements in a linked list is more efficient than array as it requires updating pointers, while arrays require shifting elements.</p><p><strong>No Wasted Space:</strong><br>Linked lists do not require reserving extra memory in the beginning, unlike arrays which might have unused elements if their size is estimated more.</p><p><strong>Non-Contiguous Memory Allocation:</strong><br>Linked lists do not require memory to be allocated in a single block, making them more adaptable for dynamic memory allocation.</p><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code:-"></a>Source Code:-</h2><p>🧠 Now that you’ve seen how the linked list works, you can check out the complete code here:<br>🔗 <a href="https://github.com/0xAKD/linked-list-c">View Full Source Code on GitHub</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/linked-list-in-c/image.png&quot; alt=&quot;cover image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;What-is-a-Linked-List&quot;&gt;&lt;a href=&quot;#What-is-a-Linked-List&quot; c</summary>
      
    
    
    
    <category term="software" scheme="https://0xakd.github.io/categories/software/"/>
    
    
    <category term="dynamic-memory-allocation" scheme="https://0xakd.github.io/tags/dynamic-memory-allocation/"/>
    
    <category term="linked-list" scheme="https://0xakd.github.io/tags/linked-list/"/>
    
    <category term="c-programming" scheme="https://0xakd.github.io/tags/c-programming/"/>
    
  </entry>
  
  <entry>
    <title>Dynamic Memory Allocation in C</title>
    <link href="https://0xakd.github.io/2025/01/05/dynamic-memory-allocation-in-c/"/>
    <id>https://0xakd.github.io/2025/01/05/dynamic-memory-allocation-in-c/</id>
    <published>2025-01-05T11:21:34.000Z</published>
    <updated>2025-09-07T05:40:50.358Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/dynamic-memory-allocation-in-c/coverpage.jpeg" alt="cover pic"></p><p>Before jumping to Dynamic memory allocation we need to know about how the memory is used by a program in C.</p><p>There are 4 memory segments :-</p><ul><li><p><strong>Stack</strong> - it is a region of limited amount of memory that is temporary allocated to a program by the processor and the compiler</p><ul><li>It operates in LIFO (Last in first out) format. That means that the last piece of data added to the stack is the first one to be removed.</li><li>The stack is mainly used for storing local variables, function parameters and return addresses.</li></ul></li><li><p><strong>Heap</strong> - It is a region of memory which is used for dynamic memory allocation.</p><ul><li>this allows more flexible memory usage, as its size is much larger than stack. So the memory can be allocated and freed in any order.</li><li>The heap is used for variables that need to persist beyond the scope of a function or for large data structures that exceed the stack’s capacity.</li></ul></li><li><p><strong>Static&#x2F;Global</strong>- The static and Global variables are stored in this part..</p></li><li><p><strong>Code</strong> - This part of memory stores the executable code of the program.</p></li></ul><p><img src="/../images/dynamic-memory-allocation-in-c/image2.jpeg" alt="Application memory"></p><h3 id="Now-back-to-Dynamic-memory-allocation…"><a href="#Now-back-to-Dynamic-memory-allocation…" class="headerlink" title="Now back to Dynamic memory allocation…"></a>Now back to Dynamic memory allocation…</h3><p>Dynamic memory allocation refers to the process of dynamically allocating memory during runtime of a program, rather than at compile-time, i.e. static memory allocation.</p><p>By default, a limited amount of memory is allocated to a program. The default Memory allocation differs every time. It is decided by the processor and the compiler that how much memory should be allocated to a program.</p><p>In C language, Dynamic memory allocation can be done by the following functions which are present in the &lt;stdlib.h&gt; header file.-</p><ul><li><p><strong>malloc() -</strong></p><ul><li><p>it stands for “Memory Allocation”.</p></li><li><p>This function is used to dynamically allocate a block of memory of specified size from the heap and returns a pointer to the address of the first byte of the allocated memory in the stack.</p></li><li><p>The memory allocated using malloc() function remains in the heap untill its manually freed with the free() function.</p></li><li><p>In case, if the malloc() function is unable to allocate memory it will return NULL.</p></li></ul></li><li><p><strong>calloc() -</strong> </p><ul><li><p>It stands for “Clear Allocation”.</p></li><li><p>The calloc() function is similar as the malloc() function, but with a additional feature of initializing the allocated memory block to zero.</p></li><li><p>This function is commonly used when initializing arrays or structures to avoid unpredictable behavior caused by uninitialized values.</p></li></ul></li><li><p><strong>realloc() -</strong></p><ul><li><p>It stands for “Reallocate”.</p></li><li><p>It is used to resize of memory block that was previously allocated using malloc() or calloc() functions.</p></li><li><p>If there is enough space to expand the block, the realloc() function will adjust the size of the block and return a pointer to the new memory. If there is not enough space, the function may allocate a new block of the requested size, copy the contents of the old block to the new block, and free the old block.</p></li></ul></li><li><p><strong>free() -</strong></p><ul><li><p>This function is used to deallocate memory that was previously allocated using either malloc(), calloc(), or realloc().</p></li><li><p>If a program attempts to access freed memory, it can result in undefined behavior, including crashes and unexpected results.</p></li></ul></li></ul><p>Syntax of the above functions…<br><img src="/../images/dynamic-memory-allocation-in-c/image.png" alt="functions syntax"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/dynamic-memory-allocation-in-c/coverpage.jpeg&quot; alt=&quot;cover pic&quot;&gt;&lt;/p&gt;
&lt;p&gt;Before jumping to Dynamic memory allocation w</summary>
      
    
    
    
    <category term="software" scheme="https://0xakd.github.io/categories/software/"/>
    
    
    <category term="C" scheme="https://0xakd.github.io/tags/C/"/>
    
    <category term="dynamic-memory-allocation" scheme="https://0xakd.github.io/tags/dynamic-memory-allocation/"/>
    
  </entry>
  
  <entry>
    <title>Learn Go from Scratch</title>
    <link href="https://0xakd.github.io/2024/07/03/learn-go-from-scratch/"/>
    <id>https://0xakd.github.io/2024/07/03/learn-go-from-scratch/</id>
    <published>2024-07-03T16:33:35.000Z</published>
    <updated>2025-09-07T05:40:50.358Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/learn-go-from-scratch/image.png" alt="cover image"></p><h2 id="How-to-Download-and-install-go-in-your-device"><a href="#How-to-Download-and-install-go-in-your-device" class="headerlink" title="How to Download and install go in your device"></a>How to Download and install go in your device</h2><h2 id="Downloading-Go"><a href="#Downloading-Go" class="headerlink" title="Downloading Go"></a>Downloading Go</h2><ul><li>Go to the official website of Go i.e. <a href="https://go.dev/">https://go.dev/</a></li><li>Click download</li><li>Select your Operating System and download the latest version</li></ul><h3 id="Installing-Go-on-Different-Operating-Systems"><a href="#Installing-Go-on-Different-Operating-Systems" class="headerlink" title="Installing Go on Different Operating Systems"></a>Installing Go on Different Operating Systems</h3><ul><li><strong>Windows</strong><ul><li>Open the MSI file you downloaded and follow the prompts to install Go. By default, the installer will install Go to Program Files or Program Files (x86). You can change the location as needed. After installing, you will need to close and reopen any open command prompts so that changes to the environment made by the installer are reflected at the command prompt.</li><li>Verify that you’ve installed Go.</li><li>In Windows, click the Start menu.</li><li>In the menu’s search box, type cmd, then press the Enter key.</li><li>In the Command Prompt window that appears, type the following command:</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br></pre></td></tr></table></figure><p>Confirm that the command prints the installed version of Go.</p><ul><li><strong>Linux</strong><br>Remove any previous Go installation by deleting the &#x2F;usr&#x2F;local&#x2F;go folder (if it exists), then extract the archive you just downloaded into &#x2F;usr&#x2F;local, creating a fresh Go tree in &#x2F;usr&#x2F;local&#x2F;go:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> -rf /usr/local/go &amp;&amp; tar -C /usr/local -xzf go1.22.4.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><ul><li><p>(You may need to run the command as root or through sudo). Do not untar the archive into an existing &#x2F;usr&#x2F;local&#x2F;go tree. This is known to produce broken Go installations.</p></li><li><p>Add &#x2F;usr&#x2F;local&#x2F;go&#x2F;bin to the PATH environment variable. You can do this by adding the following line to your $HOME&#x2F;.profile or &#x2F;etc&#x2F;profile (for a system-wide installation):</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin</span><br></pre></td></tr></table></figure><ul><li><p>Note: Changes made to a profile file may not apply until the next time you log into your computer. To apply the changes immediately, just run the shell commands directly or execute them from the profile using a command such as source $HOME&#x2F;.profile.</p></li><li><p>Verify that you’ve installed Go by opening a command prompt and typing the following command:</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br></pre></td></tr></table></figure><p>Confirm that the command prints the installed version of Go.</p><p><strong>Mac</strong></p><ul><li><p>Open the package file you downloaded and follow the prompts to install Go.</p></li><li><p>The package installs the Go distribution to &#x2F;usr&#x2F;local&#x2F;go. The package should put the &#x2F;usr&#x2F;local&#x2F;go&#x2F;bin directory in your PATH environment variable. You may need to restart any open Terminal sessions for the change to take effect.</p></li><li><p>Verify that you’ve installed Go by opening a command prompt and typing the following command:</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br></pre></td></tr></table></figure><p>Confirm that the command prints the installed version of Go.</p><h3 id="Setting-Up-VS-Code-for-Golang"><a href="#Setting-Up-VS-Code-for-Golang" class="headerlink" title="Setting Up VS Code for Golang"></a>Setting Up VS Code for Golang</h3><p><strong>Download and install vs code in your device:</strong></p><ul><li>For Windows -&gt; Microsoft Store</li><li>For Linux -&gt; Snap Store</li><li>For Mac -&gt; App Store</li><li>Or else you can download it from its website: <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></li></ul><p><strong>Installing Go extention for VS code</strong></p><ul><li>Go to Extensions section in vs code</li><li>Search: “Go”</li><li>install the 1st extension named “Go” by go.dev</li></ul><h2 id="Getting-Started-with-GO"><a href="#Getting-Started-with-GO" class="headerlink" title="Getting Started with GO"></a>Getting Started with GO</h2><p><strong>Creating Path for GO</strong>:</p><ul><li>Make a new folder anywhere in your directory and name it “GO_LANG”.</li><li>Drag &amp; Drop that folder in your VS code</li><li>Create another new folder in that that folder and name it “ helloworld “.</li><li>Create a file under that “helloworld” folder and name it “ main.go .</li></ul><p><strong>How to run your Go code in vs code??</strong></p><ul><li>Right Click on the folder which you are using.</li><li>Choose “Open integrated terminal”</li><li>Go to the Terminal and Type: “go run &lt;filename.go&gt;” and press enter.</li></ul><h3 id="Go-Mod"><a href="#Go-Mod" class="headerlink" title="Go Mod"></a>Go Mod</h3><p>The go mod command is a fundamental part of the Go Modules system. It is used to <strong>create or initialize a Go module</strong>, which is a way to manage dependencies and versioning in your Go projects.</p><p>Follow the steps to initialize go mod:</p><ol><li><p>Right click on the folder your are in and open integrated terminal.</p></li><li><p>Type “go mod init <filename>“ and hit enter.</p></li></ol><p><em><strong>You have to mod every new folder you will make</strong></em></p><h3 id="Basic-Structure-of-Go"><a href="#Basic-Structure-of-Go" class="headerlink" title="Basic Structure of Go"></a>Basic Structure of Go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//the main function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//your code </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Printing-“Hello-World”-in-Go"><a href="#Printing-“Hello-World”-in-Go" class="headerlink" title="Printing “Hello World” in Go."></a>Printing “Hello World” in Go.</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>The “fmt” package :- Stands for Format package. It offers a variety of functions to manipulate the format of input and output.</p></li><li><p>The “fmt” package contains many functions under it. Some of the most commonly used functions of the “fmt” package are :-</p><ol><li><p>Sprintf - uses verbs like %s (string), %d(int), %f(float), %t(bool), etc. to interpolate values into a string and returns it as a single string.</p></li><li><p>Printf - formats the input in the same way as Sprintf before printing it</p></li><li><p>Println -simply prints the arguments it receives.</p></li></ol></li></ul><h2 id="Data-types-in-Go"><a href="#Data-types-in-Go" class="headerlink" title="Data types in Go."></a>Data types in Go.</h2><p>There are mainly 4 data types :- string, integer, float, boolean. They are further divided into several categories:-</p><h3 id="Integers"><a href="#Integers" class="headerlink" title="Integers"></a>Integers</h3><ul><li>int &#x3D; ranges from negative ∞ to positive ∞</li><li>int8 &#x3D; ranges from -128 to 127</li><li>int16 &#x3D; ranges from -32768 to 32767</li><li>int32 &#x3D; ranges from -2147483648 to 2147483647</li><li>int64 &#x3D; ranges -9223372036854775808 to 9223372036854775807</li><li>uint8 &#x3D; ranges from 0 to 255</li><li>uint16 &#x3D; ranges from 0 to 65535</li><li>uint32 &#x3D; ranges from 0 to 4294967295</li><li>uint64 &#x3D; ranges from 0 to 18446744073709551615</li></ul><h3 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h3><ul><li>float32 &#x3D; all 32-bit floating point numbers.</li><li>float64 &#x3D; all 64-bit floating point numbers.</li></ul><h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><ul><li>string &#x3D; used for storing characters, letters, symbols, etc…</li></ul><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><ul><li>bool &#x3D; Stores either true or false value.</li></ul><h2 id="Packages-in-Golang"><a href="#Packages-in-Golang" class="headerlink" title="Packages in Golang"></a>Packages in Golang</h2><p><strong>Package</strong> - A package in Go is a collection of source files in the same directory that are compiled together. Packages are used to organize code and promote code reuse. Each Go program is made up of packages, and the program starts running in the main package.</p><h3 id="Key-Points-about-packages-in-Golang"><a href="#Key-Points-about-packages-in-Golang" class="headerlink" title="Key Points about packages in Golang. :-"></a>Key Points about packages in Golang. :-</h3><ol><li><strong>Package Declaration</strong> :- Every Go source file starts with a package declaration. This defines the package to which the file belongs.</li></ol><p>syntax:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> package_name</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Importing Packages</strong>:- To use functions, types, or variables from another packages, we need to import that package.</li></ol><p>syntax:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;package_name&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Logintoken <span class="type">string</span> = <span class="string">&quot;zvbnm&quot;</span> <span class="comment">//Public constant</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//String values</span></span><br><span class="line"><span class="keyword">var</span> variable1 <span class="type">string</span> = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="comment">//Integer values</span></span><br><span class="line"><span class="keyword">var</span> variable2 <span class="type">int</span> = <span class="number">530</span></span><br><span class="line"><span class="comment">//Float values</span></span><br><span class="line"><span class="keyword">var</span> variable3 <span class="type">float32</span> = <span class="number">322.123144645776575675675756</span></span><br><span class="line"><span class="keyword">var</span> variable4 <span class="type">float64</span> = <span class="number">322.123144645776575675675756</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//default values and some alias</span></span><br><span class="line"><span class="keyword">var</span> variable5 <span class="type">float64</span></span><br><span class="line"><span class="keyword">var</span> variable6 <span class="type">string</span></span><br><span class="line"><span class="keyword">var</span> variable7 <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//no var delaration style</span></span><br><span class="line">    variable8 := <span class="number">1234</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Multiple variable declaration</span></span><br><span class="line">    <span class="keyword">var</span> variable9, variable10, variable11 <span class="type">string</span> = <span class="string">&quot;Shiv&quot;</span>, <span class="string">&quot;Shankar&quot;</span>, <span class="string">&quot;Bhole&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>“var” keyword is used to declare a variable.</li><li>“:&#x3D;” is used for direct declaration of a variable.</li><li>Default Values don’t store garbage values.<br>for eg. :- default string variables will return null value. default int&#x2F;float variables will return 0.</li></ul><h3 id="Printing-Strings-with-variables"><a href="#Printing-Strings-with-variables" class="headerlink" title="Printing Strings with variables"></a>Printing Strings with variables</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name <span class="type">string</span> = <span class="string">&quot;Ganesh&quot;</span></span><br><span class="line">    <span class="keyword">var</span> age <span class="type">int</span> = <span class="number">18</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;She is&quot;</span>,name ,<span class="string">&quot;of age&quot;</span>, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="To-Print-the-Data-Type-of-a-Given-Value"><a href="#To-Print-the-Data-Type-of-a-Given-Value" class="headerlink" title="To Print the Data Type of a Given Value"></a>To Print the Data Type of a Given Value</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    abc = <span class="number">324.5425</span></span><br><span class="line">    fmt.Printf(<span class="string">&quot;this variable is of type: %T\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>“%T” is used for identifying the data type</li></ul><h3 id="Arithmetic-Operations"><a href="#Arithmetic-Operations" class="headerlink" title="Arithmetic Operations"></a>Arithmetic Operations</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sum := <span class="number">5</span> + <span class="number">4</span></span><br><span class="line">    sub := <span class="number">6</span> - <span class="number">2</span></span><br><span class="line">    mul := <span class="number">3</span> * <span class="number">2</span></span><br><span class="line">    div := <span class="number">10</span> / <span class="number">2</span></span><br><span class="line">    mod := <span class="number">53</span> % <span class="number">5</span></span><br><span class="line">    greater := <span class="number">4</span> &gt; <span class="number">3</span> <span class="comment">// returns boolean value i.e. True or false.</span></span><br><span class="line">    lesser := <span class="number">5</span> &lt; <span class="number">7</span> <span class="comment">// returns boolean value i.e. True or false.</span></span><br><span class="line">    equalto := <span class="number">6</span> == <span class="number">7</span> <span class="comment">// returns boolean value i.e. True or false.</span></span><br><span class="line">    notequal := <span class="number">5</span> != <span class="number">4</span> <span class="comment">// returns boolean value i.e. True or false.</span></span><br><span class="line">    greaterequal := <span class="number">8</span> &gt;= <span class="number">4</span> <span class="comment">// returns boolean value i.e. True or false.</span></span><br><span class="line">    lesserequal := <span class="number">6</span> &lt;= <span class="number">9</span> <span class="comment">// returns boolean value i.e. True or false.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="User-Input"><a href="#User-Input" class="headerlink" title="User Input"></a>User Input</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    reader = bufio.NewReader(os.Stdin) <span class="comment">//Stdin stands for Standard input.</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;&lt;Input statement for user&gt;&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    input, _ := reader.ReadString(<span class="string">&quot;\n&quot;</span>) <span class="comment">// &quot;, _&quot; is called comma ok syntax. </span></span><br><span class="line">    fmt.Println(<span class="string">&quot;Your input is, &quot;</span>, input)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Bufio or Buffered I&#x2F;O package</strong> :- allows input and output with a buffer.</p><p><strong>os package</strong> :- It allows you to access to operating system functionalities.</p><p><strong>variable name.ReadString(“\n”)</strong> :- it reads the user input data in string form until the user enters the value given inside the brackets i.e. “\n” (new line) .</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/learn-go-from-scratch/image.png&quot; alt=&quot;cover image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;How-to-Download-and-install-go-in-your-device&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="software" scheme="https://0xakd.github.io/categories/software/"/>
    
    
    <category term="basics" scheme="https://0xakd.github.io/tags/basics/"/>
    
    <category term="golang" scheme="https://0xakd.github.io/tags/golang/"/>
    
  </entry>
  
</feed>
